/*
 * generated by Xtext 2.10.0
 */
package org.xtext.example.ipl.generator

import java.util.ArrayList
import java.util.HashMap
import java.util.List
import java.util.Map
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.IEObjectDescription
import org.xtext.example.ipl.Utils
import org.osate.aadl2.AadlBoolean
import org.osate.aadl2.AadlInteger
import org.osate.aadl2.AadlReal
import org.osate.aadl2.BooleanLiteral
import org.osate.aadl2.ComponentImplementation
import org.osate.aadl2.IntegerLiteral
import org.osate.aadl2.Property
import org.osate.aadl2.PropertySet
import org.osate.aadl2.RealLiteral
import org.osate.aadl2.SubprogramGroupImplementation
import org.osate.aadl2.SubprogramImplementation
import org.osate.aadl2.instance.ComponentInstance
import org.osate.aadl2.instance.util.InstanceUtil
import org.osate.aadl2.instantiation.InstantiateModel
import org.osate.aadl2.modelsupport.resources.OsateResourceUtil
import org.osate.aadl2.properties.PropertyNotPresentException
import org.osate.xtext.aadl2.properties.util.EMFIndexRetrieval
import org.osate.xtext.aadl2.properties.util.PropertyUtils
import org.xtext.example.ipl.iPL.IPLSpec
import org.xtext.example.ipl.iPL.ViewDec

import static extension org.eclipse.xtext.EcoreUtil2.*
import static extension org.xtext.example.ipl.validation.IPLRigidityProvider.isRigid
import org.xtext.example.ipl.iPL.Formula
import org.xtext.example.ipl.iPL.FormulaOperation
import org.xtext.example.ipl.iPL.Negation
import org.xtext.example.ipl.iPL.QAtom
import org.xtext.example.ipl.iPL.TermOperation
import org.xtext.example.ipl.iPL.ID
import org.xtext.example.ipl.iPL.Int
import org.xtext.example.ipl.iPL.Real
import org.xtext.example.ipl.iPL.Bool
import org.xtext.example.ipl.iPL.Fun
import org.xtext.example.ipl.iPL.PropertyExpression
import org.xtext.example.ipl.validation.IPLTypeProvider
import org.xtext.example.ipl.validation.SetType
import org.xtext.example.ipl.validation.ComponentType
import org.xtext.example.ipl.iPL.ExprOperation
import org.xtext.example.ipl.PrismConnectorAPI
import org.eclipse.core.resources.ResourcesPlugin
import java.net.URL
import org.eclipse.core.runtime.FileLocator
import org.eclipse.core.runtime.Platform
import org.xtext.example.ipl.validation.IntType
import org.xtext.example.ipl.iPL.Set
import org.xtext.example.ipl.validation.RealType
import org.xtext.example.ipl.validation.BoolType
import org.xtext.example.ipl.iPL.Expression

//import org.xtext.example.ipl.iPL.EDouble

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class IPLGenerator extends AbstractGenerator {

	private val smtGenerator = new SmtGenerator

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val specs = resource.allContents.filter(IPLSpec).toList
		
		val String backgr = smtGenerator.generateBackgroundSmt(specs)
		
		// generation of SMT for IPL formulas
		val formulasSMT = specs.map [
			formulas.map [
				smtGenerator.generateSMTFormula(it)
			].join('\n')
		].join('\n')
		println("Done generating IPL SMT")

		val filename = resource.URI.trimFileExtension.lastSegment + '.z3'; 
		fsa.generateFile(filename,
			backgr + formulasSMT + ''' 
			
			(check-sat) 
			
			''') 
			/*'''
(define-sort ArchElem () Int)

; Anonymous sets
«setDecls»

; Components
«decls»

«defns»


; Properties and subcomponents
«props»

; isSubcomponentOf
(declare-fun isSubcomponentOf (ArchElem ArchElem) Bool)
«subComps»

; Rigid IPL
«formulasSMT»

(check-sat)
'''
		)*/
		
		System::out.println("Done generating SMT, see file " + filename)
		
		// call smt first 
		var z3Filename = fsa.getURI(resource.URI.trimFileExtension.lastSegment + '.z3')
		var z3FilePath = FileLocator.toFileURL(new URL(z3Filename.toString)).path
		
		var z3Res = Utils.executeShellCommand("z3 -smt2 " + z3FilePath, null) 
		z3Res = z3Res.replaceAll("\\s+", ""); // remove whitespace
		
		if (z3Res.equals("unsat"))
			println("unsat")
		else if (z3Res.equals("sat"))
			println("sat")
		else  
			println("error: " + z3Res)
			
		
		
		// call prism if needed  
		if (false) { 
			System.out.println(System.getProperty("java.library.path"));
			
			val PrismConnectorAPI pc = new PrismConnectorAPI() 
			
	
	        var prismModelUri = fsa.getURI("../model/prism/prismtmp.prism")
	        var prismPropsUri = fsa.getURI("../model/prism/mapbot.props")
	        var prismPolUri = fsa.getURI("../model/prism/strat-out")
	        System::out.println(prismModelUri)
	        
//	        irrelevant
//	        var homePath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString()
//	        System::out.println(homePath)
			println(new URL(prismModelUri.toString))
	        
	        var prismModelPath = FileLocator.toFileURL(new URL(prismModelUri.toString)).path
	        var prismPropsPath = FileLocator.toFileURL(new URL(prismPropsUri.toString)).path
	        var prismPolPath = FileLocator.toFileURL(new URL(prismPolUri.toString)).path
	        
	        println("path: " + prismModelPath)
	             
	        var res = PrismConnectorAPI.modelCheckFromFileS(prismModelPath, prismPropsPath, prismPolPath);
	        System::out.println(res)
	        //val res = PrismConnectorAPI.modelCheckFromFileS(myModel,myProps, myPolicy)
	        
	        
	        
	        /*var URL templateUrl = FileLocator.toFileURL(
	        	Platform.getBundle(Activator.PLUGIN_ID).getResource("model/")
	        )
	        System::out.println(templateUrl)*/
	        
			//getResource("res/sched/sched-model-template.pml"))
		}
	}
	
}
