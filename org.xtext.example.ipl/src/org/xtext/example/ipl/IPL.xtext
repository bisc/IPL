grammar org.xtext.example.ipl.IPL with org.eclipse.xtext.common.Terminals

generate iPL "http://www.xtext.org/example/ipl/IPL"

Spec:
	(decls += Declaration ';')*
	(formulas += Formula ';')*
;

Declaration:
	VarDec | STVarDec | ElemDec | FunDec
;

BaseType:
	('int' | 'real' | 'bool' | 'string')
;

Type:
	{Type} BaseType | {SetType} '{' elem=BaseType '}'
;

VarDec:
	'var' name=ID ':' type = Type
;

STVarDec:
	'stvar' name=ID ':' type = Type
;

ElemDec:
	'elem' name=ID
;

FunDec:
	(RFunDec | MFunDec | BFunDec)
;

RFunDec:
	'vrfun' name=ID '(' (paramTypes += Type)? (',' paramTypes += Type)* ')' IMP retType = Type
;

MFunDec:
	'mfun' name=ID '(' (paramTypes += Type)? (',' paramTypes += Type)* ')' IMP retType = Type
;

BFunDec:
	'bfun' name=ID '(' (paramTypes += Type)? (',' paramTypes += Type)* ')' IMP retType = Type
;

Bool:
	value=('true' | 'false')
;

Const:
	{EInt} INT | {EReal} (INT '.' INT (('e' | 'E') INT)?) | Bool | {EString} STRING
;

Property:
	elem=[ElemDec] '.' member=ID
;

Fun:
	name=[FunDec] '(' (args += Term)? (',' args += Term)* ')'
;

Expression:
	Addition;

Addition returns Expression:
	Multiplication (({ExprOperation.left=current} op=('+' | '-')) right=Multiplication)*
;

Multiplication returns Expression:
	PrimaryExpression (({ExprOperation.left=current} op=('*' | '/')) right=PrimaryExpression)*
;

PrimaryExpression returns Expression:
	'(' Expression ')' |
	Const |
	Fun |
	Property |
	{ID} ID
;

Term returns TermFormula: 
	'(' TermFormula ')' | (=> Expression)
;

TermFormula returns TermFormula:
		Term ({TermOperation.left=current} op=(LT | LTE | GT | GTE | EQ | NE) right=Term)*
;

TAtom:
	op=(ALWAYS | NEXT | UNTIL | EVENTUALLY) '(' exp=Formula ')'
;

QAtom:
	op=(FORALL | 'exists') var=ID ':' set=Term ',' exp=Formula 
;

Formula:
	NegFormula ({FormulaOperation.left=current} op=(AND | OR | IMP) right=NegFormula)* | (-> QAtom)
;

NegFormula returns Formula:
	{Negation} NOT child=NegFormula | FormulaBase
;

FormulaBase returns Formula:
	(=> TermFormula) | '(' Formula ')' | TAtom
;

terminal AND:
	('&' | '^')
;

terminal OR:
	('|' | 'V')
;

terminal NOT:
	('!' | '-')
;

terminal IMP:
	'->'
;

terminal LT:
	'<'
;

terminal LTE:
	'<='
;

terminal GT:
	'>'
;

terminal GTE:
	'>='
;

terminal EQ:
	'='
;

terminal NE:
	'!='
;

terminal NEXT:
	'X' | 'N' | 'NEXT'
;

terminal ALWAYS:
	'G' | 'ALWAYS'
;

terminal UNTIL:
	'U' | 'UNTIL'
;

terminal EVENTUALLY:
	'F' | 'EVENTUALLY'
;

terminal FORALL:
	'forall' | 'A'
;

terminal EXISTS:
	'exists' | 'E'
;
